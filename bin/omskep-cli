#!/usr/bin/env node

const puml = require('../src/omskep-puml.js')
const fs = require('fs');
const path = require('path');

// Catch this cause it is optional
let pumlEncoder = require('plantuml-encoder');
// try {
//     let pumlEncoder = require('plantuml-encoder');
// } catch(er) {
//     let pumlEncoder = null;
// }

// console.log('PUML: ' + pumlEncoder);

const usage = 'omskep-cli <diagram type> [options (key/value pairs)] <input file> [<input file> <input file> ...]';
let Puml = puml.Puml;
let data = '';

/**
* processes args and data to determine the output
* @param {string} data - data of the input file or from pipe
*/
function handleCli(data = '') {

    let ret = '';
    let diag = null;

    // console.dir(opts);
    // console.dir(args);
    
    // special handling for -pumlurl, since it relies on plantuml-encoder package
    if ((opts['pumlurl'] != null) && (opts['pumlurl'])) {
        if (! pumlEncoder) {
            console.error('Please install "plantuml-encoder" to use -pumlurl option');
            process.exit(1);
        }
    }

    //
    // There is a weird behavior on windows using emulation (i.e. git bash), if the value to the -resource
    // argument begins with a /, then windows expands that to the current working directory
    // Work arround is to prepend // to the path. Here we check if // is prepend and windows
    //
    if ((opts['resource']) && (process.platform === 'win32') && (opts['resource'].match('C:/'))) {
        console.log(opts['resource']);
        console.error('For windows CLI, you must prepend the value to the "resource" argument with "//" instead of just "/"');
        process.exit(1);
    }

    //
    // If no data, then a filename was given on cli instead of pipe
    //
    if (data === '') {
        if (args.length < 2) {
            console.error(usage);
            process.exit(1);
        }
        if (! fs.existsSync(args[1])) {
            console.error('Can not find the file '+ args[1]);
            process.exit(1);
        }
        data = fs.readFileSync(args[1], 'utf8');
    }
    

    //
    // For now, assume only puml diagrams, but in future have a flag if it is some
    // other diagram (i.e. mermaid, dc3, etc)
    //
    diag = new Puml(data);
    diag.title = opts['title'] != null ? opts['title'] : null;
    diag.theme = opts['theme'] != null ? opts['theme'] : null;

    switch(args[0]) {
        case 'sequence':
            if (!opts['resource'] || !opts['verb']) {
                console.error('Error: Sequence diagrams need the -path and -verb options specified.');
                process.exit(1);
            }
            ret = opts['pumlurl'] ? diag.sequence(opts).pumlurl(opts['pumlurl']) : diag.sequence(opts).puml();
            break;
        case 'class':
            ret = opts['pumlurl'] ? diag.class().pumlurl(opts['pumlurl']) : diag.class().puml();
            break;
        case 'wbs':
            ret = opts['pumlurl'] ? diag.wbs().pumlurl(opts['pumlurl']) : diag.wbs().puml();
            break;
        case 'mindmap':
            ret = opts['pumlurl'] ? diag.mindmap().pumlurl(opts['pumlurl']) : diag.mindmap().puml();
            break;
        case 'resumesummary':
            ret = opts['pumlurl'] ? diag.resumesummary().pumlurl(opts['pumlurl']) : diag.resumesummary().puml();
            break;
        case 'deployment':
            ret = opts['pumlurl'] ? diag.deployment().pumlurl(opts['pumlurl']) : diag.deployment().puml();
            break;
    } 
    // console.log('DATA :' + data);
    // let d = new Puml(data);
    // console.log(d.getPaths());
    // console.log(d.getAllHttpMethods());

    return ret;
}

let args = [];
let opts = {};

//
// Valid cli args use cases
//   omskep <diagram> <filename>
//   omskep <diagram> -option1 val1 -option2 val2... <filename>
//   cat <filename> | omskep <diagram>
//   cat <filename> | omskep <diagram> -option1 val1 -option2 val2...
//
for (let index = 2; index < process.argv.length; index++) {
    if (process.argv[index].charAt(0) === '-') {
        if ((process.argv[index+1]) && (process.argv[index+1].charAt(0) === '-')) {
            console.error(usage);
            process.exit(1);
        }
        console.log(process.argv[index+1]);
        opts[process.argv[index].substr(1)] = process.argv[index+1];
        index++;
    } else {
        args.push(process.argv[index]);
    }
}

// console.dir(args);
// console.log(opts);

//
// Figure out if the CLI is called correctly, and if a file is supplied or piped to command
//
// Note: there might be cases when the TTY check might not really work, if it is run
// in an environment that is not attached to a TTY, and the invocation is incorrect
// in that case the 3rd branch will be active, but not correct. Need to perhaps put 
// a timeout on that
//
if (args.length < 1) {
    console.log(usage);
    process.exit(1);
} else if ((args.length < 2) && (process.stdin.isTTY))  {
    console.log(usage);
    process.exit(1);
} else if (args.length < 2)  {
    process.stdin.setEncoding('utf8');
    process.stdin.on('readable', function() {
        let chunk;
        while ((chunk = process.stdin.read()) !== null) {
            data += chunk;
        }
    });
    process.stdin.on('end', function() {
        console.log(handleCli(data));
    });
} else {
    // data = fs.readFileSync(process.argv[3], 'utf8');
    console.log(handleCli(''));
}

// const plantumlEncoder = require('plantuml-encoder');


